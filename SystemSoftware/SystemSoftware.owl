Prefix(:=<http://onto.ir/ontologies/2007/12/SystemSoftware#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(owl2xml:=<http://www.w3.org/2006/12/owl2-xml#>)


Ontology(<http://onto.ir/ontologies/2007/12/SystemSoftware>
Annotation(dc:contributor "Morteza Ansarinia")
Annotation(rdfs:comment "System Software Ontology")
Annotation(rdfs:seeAlso "http://onto.ir/ontologies/SystemSoftware")
Annotation(owl:versionInfo "0.0.4")

Declaration(Class(:Administrator))
SubClassOf(:Administrator :User)
Declaration(Class(:Bootloader))
AnnotationAssertion(rdfs:comment :Bootloader "A software product, which started by hardware at the very first moments of booting. Next, the bootloader will bring on the operating system.")
SubClassOf(:Bootloader :SystemSoftware)
Declaration(Class(:BurstDeviceDriver))
SubClassOf(:BurstDeviceDriver :DeviceDriver)
Declaration(Class(:CallGate))
SubClassOf(:CallGate :SystemCall)
Declaration(Class(:CharacterDeviceDriver))
SubClassOf(:CharacterDeviceDriver :DeviceDriver)
Declaration(Class(:CommunicationProtocol))
AnnotationAssertion(rdfs:comment :CommunicationProtocol "is a standard for communicating between receiver entity, and sender entity.")
SubClassOf(:CommunicationProtocol :Protocol)
Declaration(Class(:ConditionalVariableAPI))
SubClassOf(:ConditionalVariableAPI :OperatingSystemAPI)
Declaration(Class(:ConditionalVariableModule))
SubClassOf(:ConditionalVariableModule :KernelModule)
Declaration(Class(:ContextSwitcher))
SubClassOf(:ContextSwitcher :ProcessManagmentModule)
Declaration(Class(:CooperativeScheduler))
SubClassOf(:CooperativeScheduler :NonPreemptiveScheduler)
Declaration(Class(:Developer))
SubClassOf(:Developer :User)
Declaration(Class(:DeviceDriver))
AnnotationAssertion(rdfs:comment :DeviceDriver "A low level class of softwares, which makes communication between software and hardware avaiable.")
SubClassOf(:DeviceDriver :KernelModule)
Declaration(Class(:DeviceDriverAPI))
SubClassOf(:DeviceDriverAPI :OperatingSystemAPI)
Declaration(Class(:Directory))
AnnotationAssertion(rdfs:comment :Directory "a virtual presentation of a set of files in the filesystem")
SubClassOf(:Directory :StorageObject)
Declaration(Class(:DiskScheduler))
SubClassOf(:DiskScheduler :MiddleTermScheduler)
Declaration(Class(:DiskStorageModule))
SubClassOf(:DiskStorageModule :MassStorageModule)
Declaration(Class(:DistributedFileSystem))
SubClassOf(:DistributedFileSystem :FileSystemModule)
Declaration(Class(:DistributedOperatingSystem))
SubClassOf(:DistributedOperatingSystem :SpecialPurposeOperatingSystem)
Declaration(Class(:DistributedProcessorsScheduler))
SubClassOf(:DistributedProcessorsScheduler :MultiProcessorScheduler)
Declaration(Class(:DualPriorityScheduler))
SubClassOf(:DualPriorityScheduler :PriorityScheduler)
Declaration(Class(:DynamicLibrary))
SubClassOf(:DynamicLibrary :Library)
Declaration(Class(:EmbeddedOperatingSystem))
AnnotationAssertion(rdfs:comment :EmbeddedOperatingSystem "An OS for embedding in a device, which means computer is a part of a bigger system (like a missle or sattelite).")
SubClassOf(:EmbeddedOperatingSystem :SpecialPurposeOperatingSystem)
Declaration(Class(:Event))
SubClassOf(:Event :KernelObject)
Declaration(Class(:EventManagmentModule))
SubClassOf(:EventManagmentModule :KernelModule)
Declaration(Class(:Exception))
SubClassOf(:Exception :ProcessManagmentObjects)
Declaration(Class(:ExoKernel))
SubClassOf(:ExoKernel :Kernel)
Declaration(Class(:File))
AnnotationAssertion(rdfs:comment :File "Some bytes which representing data")
SubClassOf(:File :StorageObject)
Declaration(Class(:FileSystemModule))
SubClassOf(:FileSystemModule :StorageManagementModule)
Declaration(Class(:Flag))
SubClassOf(:Flag :KernelObject)
Declaration(Class(:GeneralPurposeOperatingSystem))
AnnotationAssertion(rdfs:comment :GeneralPurposeOperatingSystem "Are operating systems for daily and general uses, like desktop or mobile operating systems.")
SubClassOf(:GeneralPurposeOperatingSystem :OperatingSystem)
Declaration(Class(:HardRealTimeScheduler))
SubClassOf(:HardRealTimeScheduler :RealTimeScheduler)
Declaration(Class(:HybridKernel))
SubClassOf(:HybridKernel :Kernel)
Declaration(Class(:HybridScheduler))
SubClassOf(:HybridScheduler :RealTimeScheduler)
Declaration(Class(:IOScheduler))
SubClassOf(:IOScheduler :MiddleTermScheduler)
Declaration(Class(:InerruptServiceRoutine))
SubClassOf(:InerruptServiceRoutine :InterruptManagmentModule)
Declaration(Class(:InterProcessCommunication))
AnnotationAssertion(rdfs:comment :InterProcessCommunication "Message passing standard for inter-process communication. One process is sender, and the other is receiver in single-channel communication. ")
SubClassOf(:InterProcessCommunication :CommunicationProtocol)
Declaration(Class(:Interrupt))
SubClassOf(:Interrupt :KernelObject)
Declaration(Class(:InterruptHandler))
SubClassOf(:InterruptHandler :InterruptManagmentModule)
Declaration(Class(:InterruptManagmentModule))
SubClassOf(:InterruptManagmentModule :KernelModule)
Declaration(Class(:Kernel))
AnnotationAssertion(rdfs:comment :Kernel "The core module of every operating system, which contains basic services like file system operating through kernel modules, to the applications and UIs.")
SubClassOf(:Kernel :SystemSoftware)
Declaration(Class(:KernelCommunication))
SubClassOf(:KernelCommunication :InterProcessCommunication)
Declaration(Class(:KernelException))
SubClassOf(:KernelException :KernelCommunication)
Declaration(Class(:KernelModule))
AnnotationAssertion(rdfs:comment :KernelModule "Different parts of kernels, each contains services belong to a unique aspect of a kernel.")
SubClassOf(:KernelModule :SystemSoftware)
Declaration(Class(:KernelObject))
AnnotationAssertion(rdfs:comment :KernelObject "simple objects make available by kernel, to the upper layers")
SubClassOf(:KernelObject :KernelModule)
Declaration(Class(:Library))
AnnotationAssertion(rdfs:comment :Library "consists of non-runable applications to simplify access, or implementations of other applications")
AnnotationAssertion(rdfs:comment :Library "should it be here, or in Application class?")
SubClassOf(:Library :Protocol)
Declaration(Class(:List))
AnnotationAssertion(rdfs:comment :List "some values in a list (random access)")
SubClassOf(:List :KernelObject)
Declaration(Class(:LongTermScheduler))
SubClassOf(:LongTermScheduler :Scheduler)
Declaration(Class(:MainMemoryManagementModule))
SubClassOf(:MainMemoryManagementModule :MemoryManagmentModule)
Declaration(Class(:MassStorageModule))
SubClassOf(:MassStorageModule :StorageManagementModule)
Declaration(Class(:MemoryManagmentAPI))
SubClassOf(:MemoryManagmentAPI :OperatingSystemAPI)
Declaration(Class(:MemoryManagmentModule))
AnnotationAssertion(rdfs:comment :MemoryManagmentModule "Takes care of memory access (new memory location, remove some values from memory, ...)")
SubClassOf(:MemoryManagmentModule :KernelModule)
Declaration(Class(:MemoryManagmentObjects))
SubClassOf(:MemoryManagmentObjects :KernelObject)
Declaration(Class(:MemoryPage))
SubClassOf(:MemoryPage :MemoryManagmentObjects)
Declaration(Class(:MemoryScheduler))
SubClassOf(:MemoryScheduler :MiddleTermScheduler)
Declaration(Class(:MemorySegment))
SubClassOf(:MemorySegment :MemoryManagmentObjects)
Declaration(Class(:MicroKernel))
SubClassOf(:MicroKernel :Kernel)
DisjointClasses(:MicroKernel :MonolithicKernel)
Declaration(Class(:MiddleTermScheduler))
SubClassOf(:MiddleTermScheduler :Scheduler)
Declaration(Class(:Monitor))
SubClassOf(:Monitor :ProcessSynchronizationObjects)
Declaration(Class(:MonolithicKernel))
SubClassOf(:MonolithicKernel :Kernel)
DisjointClasses(:MonolithicKernel :MicroKernel)
Declaration(Class(:MultiLevelFeedbackQueueScheduler))
SubClassOf(:MultiLevelFeedbackQueueScheduler :PreemptiveScheduler)
Declaration(Class(:MultiProcessorScheduler))
SubClassOf(:MultiProcessorScheduler :ProcessorScheduler)
Declaration(Class(:MultimediaOperatingSystem))
SubClassOf(:MultimediaOperatingSystem :EmbeddedOperatingSystem)
Declaration(Class(:Mutex))
SubClassOf(:Mutex :ProcessSynchronizationObjects)
Declaration(Class(:NanoKernel))
SubClassOf(:NanoKernel :Kernel)
Declaration(Class(:NetworkFilesystem))
SubClassOf(:NetworkFilesystem :FileSystemModule)
Declaration(Class(:NetworkProtocol))
AnnotationAssertion(rdfs:comment :NetworkProtocol "for communication in networks (like TCP/IP, UDP, ...)")
SubClassOf(:NetworkProtocol :CommunicationProtocol)
Declaration(Class(:NonPreemptiveScheduler))
SubClassOf(:NonPreemptiveScheduler :Scheduler)
Declaration(Class(:OperatingSystem))
AnnotationAssertion(rdfs:comment :OperatingSystem "OS is considered as a software platform for any other applications to run on a hardware platform. It contains a bootloader to be started, device drivers to communicate with hardware, and kernel as core for different services to applications and hardwares.")
SubClassOf(:OperatingSystem :SystemSoftware)
Declaration(Class(:OperatingSystemAPI))
SubClassOf(:OperatingSystemAPI :SystemCall)
Declaration(Class(:ParallelPortDeviceDriver))
SubClassOf(:ParallelPortDeviceDriver :PortDeviceDriver)
Declaration(Class(:ParallelProcessorsScheduler))
SubClassOf(:ParallelProcessorsScheduler :MultiProcessorScheduler)
Declaration(Class(:Person))
AnnotationAssertion(rdfs:comment :Person "is an entity to show users of software and hardware")
Declaration(Class(:PersonalComputerOperatingSystem))
SubClassOf(:PersonalComputerOperatingSystem :GeneralPurposeOperatingSystem)
Declaration(Class(:Pipe))
SubClassOf(:Pipe :KernelObject)
Declaration(Class(:PortDeviceDriver))
SubClassOf(:PortDeviceDriver :DeviceDriver)
Declaration(Class(:PreemptiveScheduler))
SubClassOf(:PreemptiveScheduler :Scheduler)
Declaration(Class(:PriorityScheduler))
SubClassOf(:PriorityScheduler :PreemptiveScheduler)
Declaration(Class(:Process))
AnnotationAssertion(rdfs:comment :Process "An entity, usually refered as a program, although each program can has more than a single process.
Processes are used by scheduler to achieve on CPU and hardware resources.")
SubClassOf(:Process :ProcessManagmentObjects)
Declaration(Class(:ProcessAPI))
SubClassOf(:ProcessAPI :OperatingSystemAPI)
Declaration(Class(:ProcessContext))
SubClassOf(:ProcessContext :KernelObject)
Declaration(Class(:ProcessManagmentModule))
SubClassOf(:ProcessManagmentModule :KernelModule)
Declaration(Class(:ProcessManagmentObjects))
SubClassOf(:ProcessManagmentObjects :KernelObject)
Declaration(Class(:ProcessScheduler))
SubClassOf(:ProcessScheduler :MiddleTermScheduler)
Declaration(Class(:ProcessSynchronizationModule))
SubClassOf(:ProcessSynchronizationModule :SynchronizationModule)
Declaration(Class(:ProcessSynchronizationObjects))
SubClassOf(:ProcessSynchronizationObjects :KernelObject)
Declaration(Class(:ProcessorScheduler))
SubClassOf(:ProcessorScheduler :ShortTermScheduler)
Declaration(Class(:ProtectionAndSecurityModule))
SubClassOf(:ProtectionAndSecurityModule :KernelModule)
Declaration(Class(:Protocol))
AnnotationAssertion(rdfs:comment :Protocol "standard for different aspect of software")
SubClassOf(:Protocol :SystemSoftware)
Declaration(Class(:Queue))
AnnotationAssertion(rdfs:comment :Queue "a list of some values in FIFO format")
SubClassOf(:Queue :KernelObject)
Declaration(Class(:RAIDStorageModule))
SubClassOf(:RAIDStorageModule :DiskStorageModule)
Declaration(Class(:RealTimeOperatingSystem))
AnnotationAssertion(rdfs:comment :RealTimeOperatingSystem "An embedded OS which should interact in real-time manner to environment. Real-Time means each task should has a deadline to run, and get control of CPU and hardware resources.")
SubClassOf(:RealTimeOperatingSystem :EmbeddedOperatingSystem)
Declaration(Class(:RealTimeScheduler))
SubClassOf(:RealTimeScheduler :ThreadScheduler)
Declaration(Class(:RemoteLibrary))
SubClassOf(:RemoteLibrary :Library)
Declaration(Class(:Scheduler))
AnnotationAssertion(rdfs:comment :Scheduler "Scheduler takes place, when some consumers want to get a single entity to use at the same time (common access)")
SubClassOf(:Scheduler :KernelModule)
Declaration(Class(:Semaphore))
SubClassOf(:Semaphore :ProcessSynchronizationObjects)
Declaration(Class(:SerialPortDeviceDriver))
SubClassOf(:SerialPortDeviceDriver :PortDeviceDriver)
Declaration(Class(:ShortTermScheduler))
SubClassOf(:ShortTermScheduler :Scheduler)
Declaration(Class(:Signal))
SubClassOf(:Signal :KernelCommunication)
Declaration(Class(:SoftRealTimeScheuler))
SubClassOf(:SoftRealTimeScheuler :RealTimeScheduler)
Declaration(Class(:Software))
Declaration(Class(:SpecialPurposeOperatingSystem))
AnnotationAssertion(rdfs:comment :SpecialPurposeOperatingSystem "Military, satellite, mini-devices, supercomputers and anything like these need a new operating system")
SubClassOf(:SpecialPurposeOperatingSystem :OperatingSystem)
Declaration(Class(:StandardCLibrary))
SubClassOf(:StandardCLibrary :StandardLibrary)
Declaration(Class(:StandardLibrary))
SubClassOf(:StandardLibrary :Library)
Declaration(Class(:StaticLibrary))
SubClassOf(:StaticLibrary :Library)
Declaration(Class(:StorageAPI))
SubClassOf(:StorageAPI :OperatingSystemAPI)
Declaration(Class(:StorageManagementModule))
AnnotationAssertion(rdfs:comment :StorageManagementModule "Dealing with filesystem operation.")
SubClassOf(:StorageManagementModule :KernelModule)
Declaration(Class(:StorageObject))
SubClassOf(:StorageObject :KernelObject)
Declaration(Class(:SynchronizationModule))
SubClassOf(:SynchronizationModule :KernelModule)
Declaration(Class(:SystemCall))
AnnotationAssertion(rdfs:comment :SystemCall "assist programs (application layer), to get access to some kernel space services. Kernel services are accessible to applications through this module")
SubClassOf(:SystemCall :InterProcessCommunication)
Declaration(Class(:SystemSoftware))
AnnotationAssertion(rdfs:comment :SystemSoftware "like contains programs to make computer do specific taskes, usually commanded by users, but programs in this class are narrowed to pltaforms and libraries")
SubClassOf(:SystemSoftware :Software)
Declaration(Class(:Thread))
AnnotationAssertion(rdfs:comment :Thread "a part of process, which can get the CPU time to run. Scheduler is schedulling all thread based on specific scheduling algorithm to run on the CPU")
SubClassOf(:Thread :ProcessManagmentObjects)
Declaration(Class(:ThreadAPI))
SubClassOf(:ThreadAPI :OperatingSystemAPI)
Declaration(Class(:ThreadScheduler))
SubClassOf(:ThreadScheduler :ShortTermScheduler)
Declaration(Class(:Trap))
SubClassOf(:Trap :ProcessManagmentObjects)
Declaration(Class(:User))
AnnotationAssertion(rdfs:comment :User "Virtual representation of a person in software. Can take access of software of hardware based on their rule
")
SubClassOf(:User :Person)
Declaration(Class(:VirtualFileSystemModule))
SubClassOf(:VirtualFileSystemModule :FileSystemModule)
Declaration(Class(:VirtualMemoryManagementModule))
SubClassOf(:VirtualMemoryManagementModule :MemoryManagmentModule)
Declaration(Class(:VirtualMemoryScheduler))
SubClassOf(:VirtualMemoryScheduler :MemoryScheduler)
Declaration(ObjectProperty(:hasBootloader))
SubObjectPropertyOf(:hasBootloader :operatingSystemHasPart)
InverseObjectProperties(:hasBootloader :isBootloaderOf)
ObjectPropertyDomain(:hasBootloader :OperatingSystem)
ObjectPropertyRange(:hasBootloader :Bootloader)
Declaration(ObjectProperty(:hasDeviceDriver))
SubObjectPropertyOf(:hasDeviceDriver :operatingSystemHasPart)
InverseObjectProperties(:hasDeviceDriver :isDeviceDriverOf)
ObjectPropertyDomain(:hasDeviceDriver :OperatingSystem)
Declaration(ObjectProperty(:hasFiles))
AnnotationAssertion(rdfs:comment :hasFiles "lists files and directories inside a directory.")
InverseObjectProperties(:hasFiles :isFileOf)
ObjectPropertyDomain(:hasFiles :Directory)
ObjectPropertyRange(:hasFiles :Directory)
ObjectPropertyRange(:hasFiles :File)
Declaration(ObjectProperty(:hasKernel))
SubObjectPropertyOf(:hasKernel :operatingSystemHasPart)
InverseObjectProperties(:isKernelOf :hasKernel)
ObjectPropertyDomain(:hasKernel :OperatingSystem)
ObjectPropertyRange(:hasKernel :Kernel)
Declaration(ObjectProperty(:hasModules))
InverseObjectProperties(:hasModules :isModuleOf)
ObjectPropertyDomain(:hasModules :Kernel)
ObjectPropertyRange(:hasModules :KernelModule)
Declaration(ObjectProperty(:hasThreads))
InverseObjectProperties(:hasThreads :isThreadOf)
ObjectPropertyDomain(:hasThreads :Process)
ObjectPropertyRange(:hasThreads :Thread)
Declaration(ObjectProperty(:isBootloaderOf))
SubObjectPropertyOf(:isBootloaderOf :isPartOfOperatingSystem)
InverseObjectProperties(:hasBootloader :isBootloaderOf)
FunctionalObjectProperty(:isBootloaderOf)
ObjectPropertyDomain(:isBootloaderOf :Bootloader)
ObjectPropertyRange(:isBootloaderOf :OperatingSystem)
Declaration(ObjectProperty(:isDeviceDriverOf))
SubObjectPropertyOf(:isDeviceDriverOf :isPartOfOperatingSystem)
InverseObjectProperties(:hasDeviceDriver :isDeviceDriverOf)
FunctionalObjectProperty(:isDeviceDriverOf)
ObjectPropertyDomain(:isDeviceDriverOf :DeviceDriver)
ObjectPropertyRange(:isDeviceDriverOf :OperatingSystem)
Declaration(ObjectProperty(:isFileOf))
AnnotationAssertion(rdfs:comment :isFileOf "each file belongs to a directory. this will map a file to its parent directory")
InverseObjectProperties(:hasFiles :isFileOf)
ObjectPropertyDomain(:isFileOf :File)
ObjectPropertyRange(:isFileOf :Directory)
Declaration(ObjectProperty(:isKernelOf))
SubObjectPropertyOf(:isKernelOf :isPartOfOperatingSystem)
InverseObjectProperties(:isKernelOf :hasKernel)
FunctionalObjectProperty(:isKernelOf)
ObjectPropertyDomain(:isKernelOf :Kernel)
ObjectPropertyRange(:isKernelOf :OperatingSystem)
Declaration(ObjectProperty(:isModuleOf))
InverseObjectProperties(:hasModules :isModuleOf)
ObjectPropertyDomain(:isModuleOf :KernelModule)
ObjectPropertyRange(:isModuleOf :Kernel)
Declaration(ObjectProperty(:isPartOfOperatingSystem))
InverseObjectProperties(:isPartOfOperatingSystem :operatingSystemHasPart)
Declaration(ObjectProperty(:isThreadOf))
InverseObjectProperties(:hasThreads :isThreadOf)
FunctionalObjectProperty(:isThreadOf)
ObjectPropertyDomain(:isThreadOf :Thread)
ObjectPropertyRange(:isThreadOf :Process)
Declaration(ObjectProperty(:operatingSystemHasPart))
InverseObjectProperties(:isPartOfOperatingSystem :operatingSystemHasPart)
ObjectPropertyRange(:operatingSystemHasPart :DeviceDriver)
Declaration(DataProperty(:processId))
DataPropertyDomain(:processId :Process)
DataPropertyRange(:processId xsd:integer)
Declaration(DataProperty(:threadId))
DataPropertyDomain(:threadId :Thread)
DataPropertyRange(:threadId xsd:integer)
Declaration(DataProperty(:userId))
DataPropertyDomain(:userId :User)
DataPropertyRange(:userId xsd:integer)
Declaration(DataProperty(:userName))
DataPropertyDomain(:userName :User)
DataPropertyRange(:userName xsd:string)
Declaration(DataProperty(:userPassword))
DataPropertyDomain(:userPassword :User)
DataPropertyRange(:userPassword xsd:string)
Declaration(NamedIndividual(:Windows))
ClassAssertion(:GeneralPurposeOperatingSystem :Windows)
DisjointClasses(:InterruptManagmentModule :KernelObject :MemoryManagmentModule :Scheduler :StorageManagementModule)
DisjointClasses(:Bootloader :DeviceDriver :Kernel)
)
